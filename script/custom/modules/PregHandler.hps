//----------------------------------------------------------------------------------------

#include "interfaces/UserModule_Interface.hps"
#include "custom/modules/ModuleInterfaces_Custom.hps"
#include "base/Player_Types.hps"
#include "base/InputHandler_Types.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_map.hps"

#include "helpers/helper_player_custom.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_modules_custom.hps"
#include "custom/components/ComponentInterfaces_Custom.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_flashlight.hps"
#include "helpers/helper_items.hps"
#include "helpers/helper_modules.hps"
#include "custom/helpers/helper_effects_custom.hps"
#include "custom/helpers/helper_props_custom.hps"

//----------------------------------------------------------------------------------------

const float gfBaseTimeSinceLastSpeech=2.5f;
const float gfStopBarkingWhenMoreScaredThan = 0.8f;

const float gfBabyKickMinCount = 60.f * 3.f;
const float gfBabyKickMaxCount = 60.f * 7.f;
const float gfBabyKickDelayTime = 30.f;

//----------------------------------------------------------------------------------------

array<tString> gvPregNames = { 
	"Unknown", 
	"Stage1", 
	"Stage2", 
	"Stage3", 
	"Born", 
	"Test"
	};
	
array<tString> gvPregModels = {
	"player.ent",
	"player4.ent",
	"player6.ent",
	"player9.ent",
	"player6.ent",
	"player6.ent"
	};
				
array<tString> gvTalkNames = {
	"Unknown", 						// eBabyTalkStage_Unknown,
	"CavesToCisternStart", 		// eBabyTalkStage_CavesToCisternStart,
	"CisternStartToOasis", 		// eBabyTalkStage_CisternStartToOasis,
	"OasisToAlchemists", 		// eBabyTalkStage_OasisToAlchemists,
	"Alchemists", 				// eBabyTalkStage_Alchemists,
	"TTH_BeforeName", 			// eBabyTalkStage_TTH_BeforeName,
	"TTH_AfterName", 			// eBabyTalkStage_TTH_AfterName,
	"DWF_BeforeScan", 			// eBabyTalkStage_DWF_BeforeScan,
	"DWF_AfterScan", 			// eBabyTalkStage_DWF_AfterScan,
	"DWF_Tortured", 			// eBabyTalkStage_DWF_Tortured,
	"DWF_NotTortured", 			// eBabyTalkStage_DWF_NotTortured,
	"Town", 					// eBabyTalkStage_Town,
	"Born", 					// eBabyTalkStage_Born,
	"Carried" 					// eBabyTalkStage_Carried
	};
	
class cTasiBark
{
	tString sNameStub;
	float nMinTimeSinceLastLine;
	float nBarkLikelihood;
	float nBarkDelay;
	
	cTasiBark()
	{
		sNameStub = "Unknown";
		nMinTimeSinceLastLine = 0.0f;
		nBarkLikelihood = 0.0f;
		nBarkDelay = 0.0f;
	}
	
	cTasiBark(tString asNameStub, float anMinTimeSinceLastLine, float anBarkLikelihood, float anBarkDelay)
	{
		sNameStub = asNameStub;
		nMinTimeSinceLastLine = anMinTimeSinceLastLine;
		nBarkLikelihood = anBarkLikelihood;
		nBarkDelay = anBarkDelay;
	}
};
			
array<cTasiBark> gvTasiBarks = 
{
	// 			Tag Stub,		MinTimeSinceLastLine, 	Likelihood,		Delay
	
	cTasiBark(	"",			0.0f,			1.0f,		0.0f	),	//eModEvent_Fall_Start,
	cTasiBark(	"",			-1.0f,			0.6f,		0.0f	),	//eModEvent_Fall_Small,
	cTasiBark(	"",			-1.0f,			0.9f,		1.0f	),	//eModEvent_Fall_Medium,
	cTasiBark(	"",				-1.0f,			0.9f,		1.0f	),	//eModEvent_Fall_Big,
	cTasiBark(	"",			0.0f,			1.0f,		0.0f	),	//eModEvent_Climb_Medium,
	cTasiBark(	"",	0.0f,			1.0f,		0.0f	),	//eModEvent_Climb_Medium_Done,
	cTasiBark(	"",			0.0f,			1.0f,		0.0f	),	//eModEvent_Climb_Long,
	cTasiBark(	"",		0.0f,			1.0f,		0.0f	),	//eModEvent_Climb_Long_Done,
	
	// IT - Disabled - Patrik didn't think jumps made much sense
	cTasiBark(	"",						0.0f,			0.9f,		0.0f	),	//eModEvent_Jump_Medium,
	cTasiBark(	"",						0.0f,			0.9f,		0.0f	),	//eModEvent_Jump_Long,

	cTasiBark(	"Run_Medium",			0.0f,			0.9f,		0.0f	),	//eModEvent_Run_Medium,
	cTasiBark(	"Run_Long",				0.0f,			0.9f,		0.0f	),	//eModEvent_Run_Long,
	
	// IT - Disabled - no crawl support in game currently due to FP body
	cTasiBark(	"",						0.0f,			0.9f,		0.0f	),	//eModEvent_Crawl_Medium,
	cTasiBark(	"",						0.0f,			0.9f,		0.0f	),	//eModEvent_Crawl_Long,
	
	cTasiBark(	"",			0.0f,			0.7f,		0.0f	),	//eModEvent_Push_Heavy,
	cTasiBark(	"",			0.0f,			0.7f,		0.0f	),	//eModEvent_Grab_Heavy,
	cTasiBark(	"",			0.0f,			0.9f,		0.0f	),	//eModEvent_Throw_Medium,
	cTasiBark(	"",			0.0f,			0.9f,		0.0f	),	//eModEvent_Throw_Heavy,
	cTasiBark(	"",			0.0f,			0.9f,		1.0f	),	//eModEvent_Hurt_Minor,
	cTasiBark(	"",			0.0f,			0.9f,		1.0f	),	//eModEvent_Hurt_Major,
	
	// IT - Disabled - no bark for this
	cTasiBark(	"",						0.0f,			0.9f,		0.0f	),	//eModEvent_Death,
};
		
//----------------------------------------------------------------------------------------

class cScrPregHandler : iScrUserModule, iScrUserModule_Interface, iScrPregHandler_Interface, iModEventListener
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
		//mfGlobalBabyKickRateMul=1.f;

		mfTimeSinceBabyKick = 9999999.f;
		mbBabyKicksEnabled = false;
		mlBabyKickId = 0;
		
		ModEvent_AddListener(eModuleType_Custom_PregHandler);
	}
		
	//------------------------------------------------------------
	
	void LoadUserConfig()
	{
	}
	
	//------------------------------------------------------------
	
	void SaveUserConfig()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INTERFACE
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	tString GetBabyTalkVoiceSubject()
	{	
		tString sPrefix = "Global_BabyTalk_";
		tString sSuffix = "";
		
		// Doesn't know about the baby - won't talk to it.
		if (m_babyTalkStage==eBabyTalkStage_Unknown)
			return "";
		
		// Whisper takes priority.
		if (ShouldWhisper())
		{
			switch (m_babyTalkStage)
			{
				case eBabyTalkStage_OasisToAlchemists:
				case eBabyTalkStage_Alchemists:
					sSuffix="Hush_WorryLevel1";
					break;
					
				case eBabyTalkStage_CisternStartToOasis:
				case eBabyTalkStage_TTH_BeforeName:
				case eBabyTalkStage_DWF_BeforeScan:
					sSuffix="Hush_WorryLevel2";
					break;
					
				case eBabyTalkStage_TTH_AfterName:
				case eBabyTalkStage_DWF_AfterScan:
				case eBabyTalkStage_DWF_Tortured:
				case eBabyTalkStage_DWF_NotTortured:
					sSuffix="Hush_WorryLevel3";
					break;
				
				case eBabyTalkStage_Carried:
					sSuffix="Hush_Carried";
					break;
			
				case eBabyTalkStage_Town:
				case eBabyTalkStage_Born:
				case eBabyTalkStage_CavesToCisternStart:
				default:
					return "";
			}
			return sPrefix+sSuffix;
		}
		
		// A subject specific to a (safe) room?
		if (m_babyTalkRoomSpecificSubject!="" && !(mbBabyTalkRoomSpecificLockedOnly && FearHandler_GetFearAreaState() != 1))
		{
			if (Voice_SubjectHasUnplayedLines(m_babyTalkRoomSpecificSubject))
				return m_babyTalkRoomSpecificSubject;
			m_babyTalkRoomSpecificSubject="";
		}
		
		// A subject special to this level/location?
		if (m_babyTalkSpecialSubject!="")
		{
			if (Voice_SubjectHasUnplayedLines(m_babyTalkSpecialSubject))
				return m_babyTalkSpecialSubject;
			m_babyTalkSpecialSubject="";
		}
			
		// Generic
		sSuffix = gvTalkNames[m_babyTalkStage];

		return sPrefix+sSuffix;
	}
	
	//------------------------------------------------------------
	
	eBabyTalkStage GetBabyTalkStage()
	{
		return m_babyTalkStage;
	}
	
	//------------------------------------------------------------
	
	void SetBabyKickRateMul(const float afMul)
	{
		mfGlobalBabyKickRateMul = cMath_Max(afMul, 0.001);
		
		ResetBabyKickRateMultipliers();
	}
	
	//------------------------------------------------------------
	
	void SetBabyTalkStage(eBabyTalkStage stage)
	{
		m_babyTalkStage = stage;
		m_babyTalkSpecialSubject="";
		m_babyTalkRoomSpecificSubject="";
	}
	
	//------------------------------------------------------------
	
	void SetBabyTalkSpecialSubject(tString subjectID)
	{
		m_babyTalkSpecialSubject = subjectID;
	}
	
	//------------------------------------------------------------
	
	void SetBabyTalkRoomSpecificSubject(tString subjectID, bool abLockedSafeRoomOnly)
	{
		m_babyTalkRoomSpecificSubject = subjectID;
		mbBabyTalkRoomSpecificLockedOnly = abLockedSafeRoomOnly;
	}
	
	//------------------------------------------------------------
	
	tString GetBabyTalkStageName()
	{
		return gvTalkNames[m_babyTalkStage];
	}
		
	//------------------------------------------------------------
	
	ePregStage GetStage()
	{
		return m_pregStage;
	}
	
	//------------------------------------------------------------
	
	void SetStage(ePregStage preg)
	{
		m_pregStage = preg;
		//PlayerBody_SetModel(gvPregModels[preg]);
		////////////////
		// TODO: Make pretty, make so new model have the same state as the old one
		//PlayerBody_SetActive(true);
	}
	
	//------------------------------------------------------------
	
	tString GetPregStageName()
	{
		return gvPregNames[m_pregStage];
	}
	
	//------------------------------------------------------------
	
	tString GetPregStageBodyModel()
	{
		return gvPregModels[m_pregStage];
	}
	
	//------------------------------------------------------------
	
	void SetWhispering(bool value)
	{
		m_whispering = value;
	}
	
	//------------------------------------------------------------
	
	bool ShouldWhisper()
	{
		if (FearHandler_GetFearAreaState() == 1) return false;
		if (m_whispering) return true;
		if (FearHandler_IsAgentNearby()) return true;
		if (FearHandler_GetRate()>=0.2f) return true;
		return false;
	}
	
	//------------------------------------------------------------
	
	void SetBarksActive(bool value)
	{
		m_barksActive = value;
	}
	
	//------------------------------------------------------------
		
	void OnModEvent(eModEvent eventID)
	{
		HandleBark(eventID);
	}
	
	//------------------------------------------------------------
	
	void HandleBark(eModEvent eventID)
	{
		if (!m_barksActive)
			return;
			
		tString sReactLineID="";
	
		cTasiBark@ bark = gvTasiBarks[eventID];
		sReactLineID = bark.sNameStub;
		
		if (sReactLineID=="")
			return;
			
		// Are we too scared to bark?
		if (FearHandler_GetLevel()>gfStopBarkingWhenMoreScaredThan)
			return;
			
		if (Voice_CharacterIsSpeaking("Player") || Sketchbook_IsMicroflashActive()) 
			return;
			
		// Has enough time passed?
		if (( bark.nMinTimeSinceLastLine>=0) && (m_fTimeVoiceIdle < gfBaseTimeSinceLastSpeech + bark.nMinTimeSinceLastLine))
			return;
			
		// If the bark's likelihood<1.0f, roll a dice...
		if (bark.nBarkLikelihood<1.0f)
		{
			if (cMath_RandRectf(0.0f,1.0f)>bark.nBarkLikelihood)
				return;
		}
			
		sReactLineID = "Global_Tasi_Bark_"+GetPregStageName()+"_"+sReactLineID;
		
		// Are we whispering?
		if (ShouldWhisper())
		{
			tString sWhisperLineID = sReactLineID+"_Whisper";
			if (Voice_SubjectExists(sWhisperLineID))
			{
				cLux_AddDebugMessage("Bark - playing whisper variant:"+sWhisperLineID);
				Voice_PlayDelayed(sWhisperLineID,bark.nBarkDelay,-1,"",-1);
				return;
			}
			cLux_AddDebugMessage("Bark - no whisper line available:"+sWhisperLineID);
		}
		
		if (Voice_SubjectExists(sReactLineID))
		{
			Voice_PlayDelayed(sReactLineID,bark.nBarkDelay,-1,"",-1);
			return;
		}
		cLux_AddDebugMessage("Bark - no line available:"+sReactLineID);
	}
	
	//------------------------------------------------------------
	
	void SetBabyKicksEnabled(bool abX)
	{
		mbBabyKicksEnabled = abX;
	}
	
	//------------------------------------------------------------
    
    bool GetBabyKicksEnabled()
	{
		return mbBabyKicksEnabled;
	}
    
	//------------------------------------------------------------
	
	float GetTimeSinceLastBabyKick()
	{
		return mfTimeSinceBabyKick;
	}
	
	//------------------------------------------------------------
	
	int GetBabyKickId()
	{
		return mlBabyKickId;
	}
	
	//------------------------------------------------------------
	
	void DoBabyKick(bool abForce)
	{
		mfBabyKickCount = 0.f;
		mbForceBabyKick = abForce;
	}
	
	//------------------------------------------------------------
	
	tString msItemHeld = "";
	tString msItemCommentLineID = "";
	
	void OnItemTakenOut(const tString& in asItem)
	{
		msItemHeld = asItem;
		mBaseObj.Timer_Add("Timer_CommentOnItem", 2.5f, "Timer_CommentOnItem");
	}
	
	//---------------------------------------------------
	
	void Timer_CommentOnItem(uint64 alId)
	{
		if (ShouldWhisper())
			return;
			
		if (cLux_GetPlayer().GetCurrentStateId() != ePlayerState_Normal && cLux_GetPlayer().GetCurrentStateId() != ePlayerState_Custom_UsingItem)
			return;
		
		if (msItemHeld!=Item_GetHeldType())
			return;
			
		if (Voice_AnySceneIsActive())
			return;
			
		tString sLineID = FigureOutItemLine(msItemHeld);
		if (sLineID=="")
			return;
		
		msItemCommentLineID = sLineID;
		mBaseObj.Timer_Add("Timer_DoItemBark", 2.f, "OnTimer_DoItemBark", false, false);
	}
	
	//---------------------------------------------------
	
	void OnTimer_DoItemBark(uint64 alId)
	{
		if (Voice_SceneInvolvingCharacterIsActive("Player"))
			return;
		
		Voice_Play(msItemCommentLineID, -1, "", -1);
	}
		
	//---------------------------------------------------
	
	tString FigureOutItemLine(const tString& in asItemType)
	{
		tString sPrefix="Global_Item"+asItemType+"_";
		tString sSuffix="";
		
		if (asItemType=="Radio")
		{
			if (Radio_GetCallActive())
				return "";
			
			switch (m_babyTalkStage)
			{
				case eBabyTalkStage_CavesToCisternStart:
				case eBabyTalkStage_CisternStartToOasis:
				case eBabyTalkStage_OasisToAlchemists:
					sSuffix="LQToOasisEnd";
					break;
				case eBabyTalkStage_Alchemists:
					sSuffix="Alchemists";
					break;
				case eBabyTalkStage_TTH_BeforeName:
				case eBabyTalkStage_TTH_AfterName:
					sSuffix="TTH";
					break;
				case eBabyTalkStage_DWF_BeforeScan:
				case eBabyTalkStage_DWF_AfterScan:
				case eBabyTalkStage_DWF_Tortured:
				case eBabyTalkStage_DWF_NotTortured:
					sSuffix="DWF";
					break;
				case eBabyTalkStage_Town:
					sSuffix="Town";
					break;
			}
		}
		else if (asItemType=="Orb")
		{
			if (m_babyTalkStage==eBabyTalkStage_Alchemists 
				&& cScript_GetGlobalVarBool("Alchemists_PortalHasTurnedOn") 
				&& !cScript_GetGlobalVarBool("Alchemists_TowerSeenInOrb"))
			{
				sSuffix = "AlchemistsBeforePortal";
			}
			else if (m_babyTalkStage==eBabyTalkStage_Alchemists 
				&& cScript_GetGlobalVarBool("Alchemists_TowerSeenInOrb"))
			{
				sSuffix = "AlchemistsAfterPortal";
			}
			else if (m_babyTalkStage==eBabyTalkStage_TTH_BeforeName 
				|| m_babyTalkStage==eBabyTalkStage_TTH_AfterName)
			{
				sSuffix = "TTH";
			}		
		}
		else if (asItemType=="SalimRing" || asItemType=="AlysDoll")
		{
			if (m_babyTalkStage > eBabyTalkStage_Unknown)
			{
				sSuffix = GetBabyTalkStageName();
				
				if (m_babyTalkStage==eBabyTalkStage_CavesToCisternStart)
				{
					if (!cScript_GetGlobalVarBool("PathToOutpost_Entered"))
					{
						sSuffix="Caves";
					}
				}
				else if (m_babyTalkStage==eBabyTalkStage_Born)
				{
					if (cScript_GetGlobalVarBool("Undercity_OpenedThroneRoomDoors"))
					{
						// Suppress in the Throne Room until Tasi picks up the baby.
						sSuffix="";
					}
				}
			}
		}
		else if (asItemType=="ShadowFleshCanister")
		{
			if (m_babyTalkStage>eBabyTalkStage_DWF_NotTortured)
			{
				sSuffix = GetBabyTalkStageName();
			}
			else
			{
				sSuffix="DWF";
				if (cScript_GetGlobalVarBool("DWF_UsedSolidifier"))
					sSuffix = "DWFUsed";
			}
		}
		else if (asItemType=="CurseMedallion")
		{
			if (m_babyTalkStage==eBabyTalkStage_Unknown)
			{
				if (!cScript_GetGlobalVarBool("Caves_TakenOutAmulet"))
					sSuffix = "FirstTakeOut";
			}
		}
		
		if (sSuffix=="")
			return "";
			
		return sPrefix + sSuffix;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// MAP LOADING
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnMapEnter(cLuxMap @apMap)
	{
		m_whispering = false;
		
		ResetBabyKickRateMultipliers();
	}

	//------------------------------------------------------------

	void OnMapLeave(cLuxMap @apMap)
	{
		mfGlobalBabyKickRateMul=1;
	}
	
	//------------------------------------------------------------
	
	void PreloadData(cLuxMap @apMap)
	{
		apMap.PreloadMaterial("babykick_screen.mat");
	}
	
	//------------------------------------------------------------

	void CreateWorldEntities(cLuxMap @apMap)
	{
	
	}
	
	//------------------------------------------------------------
	
	void DestroyWorldEntities(cLuxMap @apMap)
	{
	
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnEnterContainer(const tString&in asOldContainer)
	{
	
	}
	
	//------------------------------------------------------------
	
	void OnLeaveContainer(const tString&in asNewContainer)
	{
	
	}
	
	//------------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		//////////////////
		// Setup vars
		cLuxPlayer@ pPlayer = cLux_GetPlayer();
		
		if (pPlayer is null || pPlayer.GetCharacterBody() is null) // Safety check
			return;
		
		///////////////////
		// Random baby kicks!
		if (mbBabyKicksEnabled == false || pPlayer.IsActive() == false)
			return;
			
		if (mfTimeSinceBabyKick < 9999999.f)
			mfTimeSinceBabyKick += afTimeStep;
		
		///////////////////
		// Time for a kick?
		mfBabyKickCount -= afTimeStep;
		//cLux_AddDebugMessage("mfBabyKickCount "+mfBabyKickCount);
		
		if (mfBabyKickCount <= 0.f)
		{			
			int lState = pPlayer.GetCurrentStateId();
			bool bStateOK = lState != ePlayerState_InteractiveCutsceneAnimation &&
							lState != ePlayerState_InteractiveCameraAnimation &&
							lState != ePlayerState_Custom_ReadMemoryCylinder &&
							lState != ePlayerState_CutsceneAnimation &&
							lState != ePlayerState_Custom_Inventory &&
							lState != ePlayerState_Custom_PermaFail &&
							lState != ePlayerState_Custom_Struggle &&
							lState != ePlayerState_CustomControls &&
							lState != ePlayerState_Conversation &&
							lState != ePlayerState_Read &&
							lState != ePlayerState_Dead;
							
			bool bMovementOK = pPlayer.GetCharacterBody().IsOnGround();			
			bool bDialogOK = Voice_SceneInvolvingCharacterIsActive("Player") == false && Sketchbook_IsFlashbackActive() == false;
			bool bAgentsOK = Blackboard_GetHuntingAgentCount() == 0 && Terror_GetPlayerIsBeingHunted()==false;
			
			///////////////////
			// Good moment for a kick?
			if (mbForceBabyKick || bStateOK && bMovementOK && bDialogOK && bAgentsOK)
			{
				Effect_BabyKick_Start(0.8f, false);				
				
				mbForceBabyKick = false;
				
				++mlBabyKickId;
				mfTimeSinceBabyKick = 0.f;
				
				ResetBabyKickRateMultipliers();
			}
			/////////////////////
			// Otherwise, delay it!
			else
			{
				float fKickDelayMult = (1/FearHandler_GetCurrFearAreaBabyKickRateMul()) * (1/mfGlobalBabyKickRateMul);
				mfBabyKickCount = gfBabyKickDelayTime * fKickDelayMult;
			}			
		}
	}
	
	//------------------------------------------------------------
	
	void VariableUpdate(float afTimeStep)
	{
		if (Voice_AnySceneIsActive())
			m_fTimeVoiceIdle=0.0f;
		else
			m_fTimeVoiceIdle+=afTimeStep;
	}

	//------------------------------------------------------------
	
	void ResetBabyKickRateMultipliers()
	{
		float fKickDelayMult = (1/FearHandler_GetCurrFearAreaBabyKickRateMul()) * (1/mfGlobalBabyKickRateMul);
		mfBabyKickCount = cMath_RandRectf(gfBabyKickMinCount, gfBabyKickMaxCount) * fKickDelayMult;
	}
	
	//------------------------------------------------------------
	
	void PostUpdate(float afTimeStep)
	{
	}
	
	//------------------------------------------------------------
	
	void Reset()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnAction(int alAction, bool abPressed)
	{
	}
	
	//------------------------------------------------------------

	void OnAnalogInput(int alAnalogId, const cVector3f &in avAmount)
	{
	
	}
	
	//------------------------------------------------------------
	
	void OnExitPressed()
	{
	
	}
	
	//------------------------------------------------------------
	
	void AppGotInputFocus()
	{
	
	}
	void AppLostInputFocus()
	{
	
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GUI
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
	}
	
	//-------------------------------------------------------
	
	void OnDraw(float afFrameTime)
	{
	}
	
	//------------------------------------------------------------
	
	void OnPostRender(float afFrameTime)
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	// How long has the voice system been idle?
	float m_fTimeVoiceIdle;
	ePregStage m_pregStage = ePregStage_Unknown;
	bool m_barksActive = false;
	bool m_whispering = false;
	
	array<cTasiBark> m_vTasiBarks;
	
	eBabyTalkStage m_babyTalkStage = eBabyTalkStage_Unknown;
	tString m_babyTalkSpecialSubject = "";
	tString m_babyTalkRoomSpecificSubject = "";
	bool mbBabyTalkRoomSpecificLockedOnly = false;
	
	int mlBabyKickId;
	float mfBabyKickCount;
	float mfGlobalBabyKickRateMul=1.f;
	float mfTimeSinceBabyKick = 9999999;
	bool mbBabyKicksEnabled;
	bool mbForceBabyKick;
	
	//------------------------------------------------------------
}

//----------------------------------------------------------------------------------------