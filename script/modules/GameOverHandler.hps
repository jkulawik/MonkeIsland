#include "interfaces/UserModule_Interface.hps"
#include "modules/ModuleInterfaces.hps"
#include "base/Inputhandler_Types.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"

//------------------------------------------------------------

/////////////////////////////////////////
// SETTINGS
/////////////////////////////////////////

//------------------------------------------------------------

bool gbGameOverLoadingSaveGame=false;
tString gsGameOverDeathCallback="";
tString gsGameOverDeathSource="";
int glGameOverCheckpointCount=0;

class cScrGameOverHandler : iScrUserModule, iScrUserModule_Interface, iScrGameOverHandler_Interface
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// USER SETTINGS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void LoadUserConfig()
	{
	
	}
	void SaveUserConfig()
	{
	
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ENTER MAP
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnMapEnter(cLuxMap @apMap)
	{
		msCustomDeathMessageCat = "";
		msCustomDeathMessageEntry = "";
		
		msDeathCallback="";
		
		mlCheckPointDeathNum =0;
	}
	
	void OnMapLeave(cLuxMap @apMap)
	{
	}
	
	//------------------------------------------------------------
	
	void PreloadData(cLuxMap @apMap)
	{
		ImGui_PreloadImage("death_backdrop_monke", eImGuiGfx_Texture);
	}

	void CreateWorldEntities(cLuxMap @apMap)
	{
		
	}
	void DestroyWorldEntities(cLuxMap @apMap)
	{
		
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Reset()
	{		
		if(gbGameOverLoadingSaveGame==false)
		{
			mbActive = false;
			mbShowScreen = false;
			mbShowText=false;
			mbShowPressButtonText=false;
		}
		
		msCustomDeathMessageCat = "";
		msCustomDeathMessageEntry = "";
		
		msDeathCallback="";
		
		mfTimeSinceLastGameOver=999999.0f;
	}
	
	//------------------------------------------------------------
	
	void ResetMenuProperties()
	{
	
	}
	
	//------------------------------------------------------------

	void Update(float afTimeStep)
	{
		if(mfTimeSinceLastGameOver<999999.0f)
		{
			mfTimeSinceLastGameOver+=afTimeStep;
		}
	}
	
	void PostUpdate(float afTimeStep)
	{
	}
	
	void VariableUpdate(float afDeltaTime)
	{
	}
	//------------------------------------------------------------
		
	void OnAction(int alAction, bool abPressed)
	{
		if(abPressed==false || mbShowPressButtonText==false) return;
		
		if(alAction == eAction_Interact || alAction == eAction_InteractCancel ||
			alAction == eAction_Jump || alAction == eAction_MenuConfirm)
		{
			End();
		}
	}
	
	//------------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		if(!mbShowScreen)
			return; 

		cVector3f vPos;
		vPos.x = -cLux_GetHudVirtualOffset().x;
		vPos.y = -cLux_GetHudVirtualOffset().y;
		vPos.z = 0.0f;
		ImGui_GroupBegin(vPos, ImGui_GetSize());
		
			/////////////////////////////////////////
			// Background
			mfBackgroundAlpha = cMath_IncreaseTo(mfBackgroundAlpha, afTimeStep*1.0f, 1.0f);
			ImGui_SetModColorMul(cColor(1,1,1,mfBackgroundAlpha));
			ImGui_DoImage(cImGuiGfx("death_backdrop_monke", eImGuiGfx_Texture), ImGui_NrmPosGroup(0,0,1), ImGui_NrmSizeGroup(1,1));

			ImGui_ResetModifiers();

			/////////////////////////////////////////
			// Text
			cImGuiLabelData textData;
			textData.mFont.SetFile("josefin_96.fnt");
			textData.mFont.mvSize = cVector2f(34.0f);
			textData.mFontAlign = eFontAlign_Center;

			if (mbShowText)
			{
				tWString sMessage;
				if(msCustomDeathMessageCat!="" && msCustomDeathMessageEntry!="")
					sMessage = cString_ToUpperCaseW(cLux_Translate(msCustomDeathMessageCat, msCustomDeathMessageEntry));
				else
					sMessage = cString_ToUpperCaseW(cLux_Translate("GameOver", "DefaultMessage"));
					
				mfTextAlpha = cMath_IncreaseTo(mfTextAlpha, afTimeStep*1.0f, 1.0f);
				ImGui_SetModColorMul(cColor(1,1,1,mfTextAlpha));
				ImGui_SetTextOverride(sMessage);
				ImGui_DoLabelExt("", textData, ImGui_NrmPosGroup(0.0f,0.35,2.0), ImGui_NrmSizeGroup(1.0f,0.2f), 1.5f);
			}
			
			if (mbShowPressButtonText)
			{
				mfPressButtonAlpha = cMath_IncreaseTo(mfPressButtonAlpha, afTimeStep*1.0f, 1.0f);
				ImGui_SetModColorMul(cColor(1,1,1,mfPressButtonAlpha));
				ImGui_SetTextOverride(cLux_Translate("GameOver", "PressToContinue"));
				ImGui_DoLabelExt("", textData, ImGui_NrmPosGroup(0.0f,0.45f,2.0), ImGui_NrmSizeGroup(1.0f,0.2f), 1.0f);
			}
			
			ImGui_ResetModifiers();

		ImGui_GroupEnd();
	}
	
	//------------------------------------------------------------
	
	void OnDraw(float){}
	void OnPostRender(float){}
	void OnEnterContainer(const tString&in){}
	void OnLeaveContainer(const tString&in){}
	void AppGotInputFocus(){}
	void AppLostInputFocus(){}	
	void OnAnalogInput(int alAnalogId, const cVector3f &in avAmount){}
	void OnExitPressed(){}
	
	//------------------------------------------------------------
	
	
	/////////////////////////////////////////
	// PUBLIC METHODS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Start(const tString& in asDeathSource)
	{
		mbActive = true;
		
		mBaseObj.Timer_Remove(3);
		
		cLux_GetPlayer().SetActive(false);
		
		Voice_StopAll();
		
		//////////////////////////////
		// Start variables
		mfBackgroundAlpha =0;
		mfTextAlpha =0;
		mfPressButtonAlpha=0;
		mbShowText =false;
		mbShowScreen = true;
		mbShowPressButtonText=false;
		mfBackgroundAlpha = 0.0f;
		
		/////////////////////////////
		// Set up globals
		gsGameOverDeathCallback= msDeathCallback;
		gsGameOverDeathSource= asDeathSource;
		glGameOverCheckpointCount = mlCheckPointDeathNum+1;
				
		Effect_Fade_Out(2.0f);
		
		//////////////////////////
		// Next step
		mBaseObj.Timer_Add(2, 1, "Start_Timer_ShowText");
	}
	
	//------------------------------------------------------------
		
	void Start_Timer_ShowText(uint64 alID)
	{
		mbShowText = true;
		
		cLux_GetCurrentMap().SetActive(false);
			
		Music_StopAll(1);
		Effect_Fade_In(0.1f);
		cSound_FadeGlobalVolume(0, 1, eSoundEntryType_AllExceptGui, eLuxGlobalVolumeType_Menu, false);
		mBaseObj.Timer_Add(2, 2, "Start_Timer_FadeInPressButton");
	}
	
	//------------------------------------------------------------
	
	void Start_Timer_FadeInPressButton(uint64 alID)
	{
		mbShowPressButtonText = true;
	}
		
	//------------------------------------------------------------
	
	void End()
	{
		////////////////////////
		// Set up variables
		mbShowPressButtonText=false;
		mbShowText=false;
		
        cLux_AddDebugMessage("End called");
        Sound_Stop("DeathLoop", 2.0f);
        
		mBaseObj.Timer_Add(3, 2.0, "End_Timer_DeathOver");
	}
	
	//------------------------------------------------------------
	
	float GetTimeSinceLastGameOver()
	{
		return mfTimeSinceLastGameOver;
	}
	
	//------------------------------------------------------------
	
	void End_Timer_DeathOver(uint64 alID)
	{     
		gbGameOverLoadingSaveGame = true;
		cLux_LoadScreenSetBarPosAndSize(0, 0); //hide loading bar
		cLux_GetSaveHandler().DelayedLoadGameFromFile(tWString("CheckPoint.sav"),"GameOverHandler", "OnLoadSaveDone", false, false);
	}
	
	//------------------------------------------------------------
	
	void OnLoadSaveDone()
	{
		///////////////
		// Setup variables
		cLuxMap@ pMap = cLux_GetCurrentMap();
		
		pMap.SetActive(true);
				
		gbGameOverLoadingSaveGame = false;
		mbActive=false;
		
		mlCheckPointDeathNum = glGameOverCheckpointCount;
		
		mfTimeSinceLastGameOver=0;
				
		///////////////
		// Custom callback
		if(gsGameOverDeathCallback != "")
		{
			if(pMap.ScriptPrepare("void "+gsGameOverDeathCallback+"(int alNumberOfRecentDamages, const tString &in asSource)"))
			{
				pMap.SetArgInt(0, mlCheckPointDeathNum);
				tString sEntityName = gsGameOverDeathSource;
				pMap.SetArgString(1, sEntityName);
				pMap.ScriptExecute();
			}
		}
		
		///////////////
		// Map Death callback
		if(pMap.ScriptMethodExists("void OnPlayerKilled(int alNumberOfRecentDamages, const tString &in asSource)"))
		{
			if(pMap.ScriptPrepare("void OnPlayerKilled(int alNumberOfRecentDamages, const tString &in asSource)"))
			{
				pMap.SetArgInt(0, mlCheckPointDeathNum);
				tString sEntityName = gsGameOverDeathSource;
				pMap.SetArgString(1, sEntityName);
				pMap.ScriptExecute();
			}
		}
	}
	
		
	//------------------------------------------------------------
	
	void SetCustomGameOverScreenText(const tString& in asCat, const tString& in asEntry)
	{
		msCustomDeathMessageCat = asCat;
		msCustomDeathMessageEntry = asEntry;
	}
		
	//------------------------------------------------------------
		
	/////////////////////////////////////////
	// GLOBAL METHODS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void _Global_SetupCheckPoint()
	{
		msDeathCallback = cScript_GetGlobalArgString(0);
		
		//msPlayerTeleportPos = cScript_GetGlobalArgString(1);
		//msAttackerTeleportPos = cScript_GetGlobalArgString(2);
		
		//NOTE SKIPPING THIS FOR PC! MORE TENSE THAT WAY WHEN WE DUNNO WHEN IT SAVES
		//LoadScreen_ShowLoadingIcon(2.0f);
		
		//cLux_GetSaveHandler().DelayedSaveGameToFile(tWString("CheckPoint.sav"), false);
		cLux_GetSaveHandler().AutoSave(true, true); //Save as checkpoint and as AutoSave

		mlCheckPointDeathNum=0;
	}
	
			
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
		//apSet.DrawFont(tWString("Death Amount: " + mfAmount), apFont, cVector3f(5,afStartY,0), cVector2f(14), cColor(1,1) );
		//afStartY += 14;
		
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	[nosave] cGuiGfxElement@ mpBackgroundGfx;
	
	//------------------------------------------------------------
	
	[nosave] bool mbActive=false;
	[nosave] bool mbShowText=false;
	[nosave] bool mbShowPressButtonText=false;
	
	[nosave] bool mbShowScreen=false;
	[nosave] float mfTextAlpha=0;
	[nosave] float mfPressButtonAlpha=0;
	[nosave] float mfBackgroundAlpha=0;
	
	float mfTimeSinceLastGameOver=999999.0f;
	
	int mlCheckPointDeathNum = 0;
	
	tString msDeathCallback;	
	tString msCustomDeathMessageCat;
	tString msCustomDeathMessageEntry;
	
	//------------------------------------------------------------
}