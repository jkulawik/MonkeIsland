#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"

#include "helpers/custom/helper_props_custom.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/helpers/helper_player_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("01-02-beach");
		
		// Set up color grading etc.
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		ParticleSystem_Preload("beach_edge_waves.ps");
		ParticleSystem_Preload("beach_edge_waves02.ps");
		ParticleSystem_Preload("beach_edge_foam.ps");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		FearHandler_SetActive(false);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(false);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		Item_RemoveFromInventory(ItemType_GetFirstInInventory("CurseMedallion"));
		
		PlayerBody_SetActive(true);
		
		Player_SetNightVisionEnabled(false);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		
		Pregnancy_SetBarksActive(false);
		
		
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			Effect_DoF_Start(0, 1300, 2.5f, 0);
			//Effect_Blur_Start(0.5f, 1.0f);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	bool FadeGlobalLight(const tString &in asParent, const tString &in asChild, int alState)
	{
		cLux_AddDebugMessage("Fading Global Light");
		
		cLightDirectional@ light = cLux_GetCurrentMap().GetWorld().GetDirectionalLight();
		light.FadeBrightnessTo(alState == -1 ? 1.0f: 0.05f, 2.0f);
		
		return true;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1: BEACH
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		bool Sea_OnCollide(const tString &in asParent, const tString &in asChild, int alState)
		{
			iLuxEntity@ pPlayer = Map_GetEntity(PlayerBody_GetEntityName());
			
			if (pPlayer is null) return false;
			
			bool bCast = alState == -1;
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_Head", bCast);
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_Body", bCast);
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_L_Arm", bCast);
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_R_Arm", bCast);
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_L_Arm1", bCast);
			SetPlayerBodyPartCastShadow(pPlayer, "_m_Tasi_R_Arm1", bCast);
			
			return true;
		}
		
		void SetPlayerBodyPartCastShadow(iLuxEntity@ apPlayerEntity, const tString&in asMeshEntityIndexName, bool abCastShadow)
		{
			cMeshEntity@ pMeshEnt = apPlayerEntity.GetMeshEntity();
			int lBodyParId = pMeshEnt.GetSubMeshEntityIndex(apPlayerEntity.GetName() + asMeshEntityIndexName);
			
			if (lBodyParId > -1)
			{
				cSubMeshEntity@ pHeadMeshEnt = pMeshEnt.GetSubMeshEntity(lBodyParId);
				pHeadMeshEnt.SetRenderFlagBit(eRenderableFlag_ShadowCaster, abCastShadow);
			}
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE 1
 
}