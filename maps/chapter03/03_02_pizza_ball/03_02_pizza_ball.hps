#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_menu.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"
#include "helpers/helper_rotation.hps"

#include "helpers/custom/helper_props_custom.hps"
#include "helpers/custom/helpers/helper_modules_custom.hps"
#include "helpers/custom/helpers/helper_player_custom.hps"

//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("03-02-pizza-ball");
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		LastTimeOnGame_SetText("03-02-pizzaball-court");
		
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
						
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Player_SetAmbientLight_Indoors(true);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetNightVisionBrightness(1.0f);
		Player_SetNightVisionRadius(5.5f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		
		Player_SetJumpDisabled(false);
		Player_SetCrouchDisabled(false);
		Player_SetLeanDisabled(false);
				
		Pregnancy_SetBarksActive(false);
		
		Sketchbook_SetInventoryEnabled(true);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	bool mbPlayPizza = false;
 
	bool PizzaCheck(const tString &in asParent, const tString &in asChild, int alState)
	{
		mbPlayPizza = alState == 1;
		
		return true;
	}
 
	//-------------------------------------------------------
 
	bool Goal(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (mbPlayPizza)
		{
			Music_Play("PIZZABALL2", 0.8f, false, eMusicPrio_BigEvent);
			Music_PlayOverlay("YES", 0.8f);
			SwingDoor_SetLocked("door", false, true);
			cScript_SetGlobalVarBool("Pizzaball_Dunk", true);
				
			return false;
		}
		
		return true;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		bool ThrowBack(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive("pizza_ball", false);
			Map_AddTimer("ThrowBack", 1.0f, "Timer_ThrowBack");
			
			return true;
		}
		
		void Timer_ThrowBack(const tString&in asTimer)
		{
			Entity_SetActive("pizza_ball", true);
			Entity_PlaceAtEntity("pizza_ball", "PizzaSpawn", cVector3f_Zero, true);
			Entity_AddImpulse("pizza_ball", cVector3f_Forward * 6, true, true);
		}
	 
		//-------------------------------------------------------
			 
		bool Facility(const tString &in asParent, const tString &in asChild, int alState)
		{
			Music_PlayExt("fear_system_safe_01", true, 0.85f, 1.0f, 5.0f, 1.0f, eMusicPrio_BgAmb, true);
			
			return false;
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		void Tablet_OnGui(const tString&in asEntityName, float afTimeStep)
		{
			DWNote_RenderGUI(asEntityName, afTimeStep);
		}

		//-------------------------------------------------------

		bool SeeMunshi(const tString &in asParent, const tString &in asChild, int alState)
		{
			Player_StartLookAt("door_alchemist_lab_1", 1.f, 1.f, 1.f);
			Player_SetActive(false);
			
			Voice_Play("Munshi", -1, "OnVoiceSubjectDonePlaying");
			
			Music_Play("A2_1_4_Herberts_Corpse", 0.35f, false, eMusicPrio_BigEvent);
			
			return false;
		}
		
		void OnVoiceSubjectDonePlaying(const tString&in asScene, const tString&in asSubject)
		{
			Player_StopLookAt(1.0f);
			Player_SetActive(true);
			
			LastTimeOnGame_SetText("03-02-pizzaball-bitcoin");
		}

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X
 
}