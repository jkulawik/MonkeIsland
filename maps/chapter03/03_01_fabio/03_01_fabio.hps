#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_menu.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"
#include "helpers/helper_rotation.hps"

#include "helpers/custom/helper_props_custom.hps"
#include "helpers/custom/helpers/helper_modules_custom.hps"
#include "helpers/custom/helpers/helper_player_custom.hps"

//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("03-01-fabio");
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		Effect_Fade_In(1.0f);
		
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		Sketchbook_SetInventoryEnabled(true);
		
		Sound_FadeGlobalVolume(1.f, 0.f, eSoundEntryType_All);
		
		Music_Play("A2_Early_Human_Music_A", 0.4f, true, eMusicPrio_BgAmb);
		
		Entity_PlayAnimation("fabio", "look_out_window_01", 0.1f, true);
		
		Hint_ShowHint("Hints", "HintHumanMusic");
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
			LevelDoor_SetLocked("exit", false);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{			
		Player_SetAmbientLight_Outdoors(false);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetNightVisionBrightness(1.0f);
		Player_SetNightVisionRadius(5.5f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		
		Player_SetJumpDisabled(false);
		Player_SetCrouchDisabled(false);
		Player_SetLeanDisabled(false);
				
		Pregnancy_SetBarksActive(false);
		
		Sketchbook_SetInventoryEnabled(true);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	void TalkArea_OnPlayerInteract(const tString &in asEntity)
	{		
		Voice_Play("Fabio", -1, "OnVoiceSubjectDonePlaying");
		Player_StartLookAt("Trigger_2", 1, 1, 1, true);
		Player_SetActive(false);
		
		Music_FadeVolumeMul(0.15f, 1.0f);
	}
 
	//-------------------------------------------------------
	
	bool Rescue(const tString &in asParent, const tString &in asChild, int alState)
	{
		Voice_Play("Release", -1, "OnVoiceSubjectDonePlaying");
		Player_StartLookAt("Trigger_2", 1, 1, 1, true);
		Player_SetActive(false);
		
		LevelDoor_SetLocked("exit", false);
		
		Music_FadeVolumeMul(0.15f, 1.0f);
		
		return false;
	}
	
	void OnVoiceSubjectDonePlaying(const tString&in asScene, const tString&in asSubject)
	{
		Music_FadeVolumeMul(0.4f, 1.0f);
		
		SwingDoor_SetLocked("door", false, true);
		
		Player_StopLookAt(1.0f);
		Player_SetActive(true);
	}
		
	
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		void Tablet_OnGui(const tString&in asEntityName, float afTimeStep)
		{
			DWNote_RenderGUI(asEntityName, afTimeStep);
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		/*Put any functions that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE X
 
}