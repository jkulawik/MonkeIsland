#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_menu.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"
#include "helpers/helper_imgui_options.hps"
#include "helpers/helper_rotation.hps"

//--------------------------------------------------
 
const cVector2f kScreenCenter = cVector2f(512, 384); // Virtual size: 1024x768

const cVector2f kMainMenuButtonPos = cVector2f(250, 400);
const cVector2f kTitlePos = cVector2f(80, 110);
const cVector2f kTitleSize = cVector2f(460, 200);

const cColor kMainMenuButtonBgColor = cColor(69.0 / 255.0, 139.0 / 255.0, 139.0 / 255.0, 1);
const cColor kDisabledColor = cColor(100.0 / 255.0, 1);

const tString[] gvBattleName = {" C ", " O ", " L ", " O ", " N ", " E ", " L ", "  ", " M ", " U ", " N ", " S ", " H ", " I "};
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("03-03-finale");
		
		Map_SetSkyboxRotation(cVector3f(cMath_ToRad(-10), cMath_ToRad(-60), cMath_ToRad(-5)));
		
		// Set up color grading etc.
		Map_Preset_SetupDirLight("Preset_Default", true, cColor(0.257,0.354,0.365,1), 1.f, cVector3f(0.334, -0.882, 0.332), cColor(0.093,0.108,0.123,1), cColor(0.108,0.176,0.186,1));
		Map_Preset_SetupColorGrading("Preset_Default", "grading_dwfb.dds");
		Map_Preset_SetupBloom("Preset_Default", 256.f, 0.4f, 0.5f, cColor_White);
		
		Map_Preset_SetupDirLight("Preset_LightningFull", true, cColor(1,1.5,2,1), 5, cVector3f(0.334, -0.882, 0.332), cColor(0.092,0.069,0.069,1), cColor(0.092,0.069,0.069,1));
		Map_Preset_SetupBloom("Preset_LightningFull", 4.f, 0.02f, 1.5f, cColor(1.f, 2.f, 2.f, 1.f));
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		ParticleSystem_Preload("grenade_explosion.ps");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		
		Map_AddTimer("CreatePs", 3.0f, "Timer_CreatePs");
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Player_SetAmbientLight_Indoors(true);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetNightVisionBrightness(1.0f);
		Player_SetNightVisionRadius(5.5f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		
		Player_SetJumpDisabled(false);
		Player_SetCrouchDisabled(false);
		Player_SetLeanDisabled(false);
				
		Pregnancy_SetBarksActive(false);
		
		Sketchbook_SetInventoryEnabled(true);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			mbShowBattleText = true;
			Map_AddTimer("AddLetters", 0.0f, "Timer_AddLetters");
		}
		if(alAction == eAction_Test2)
		{
			mfTextAlphaTarget = 0.0f;
		}
		if(alAction == eAction_Test3)
		{
			Map_AddTimer("BananaAttack", 0.0f, "Timer_BananaAttack");
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	float mfTransitionAlpha = 1;
	tString msSelectedMainMenuButton;
	
	int mlClickedSuccumb = -1;
	int mlClickedFight = -1;
	
	float mfTextAlphaTarget = 1.0f;
	float mfTextAlpha = 1.0f;
	float mfAlphaFadeSpeed = 1.0f;
	
	bool mbDoHappy = false;
	
	//-------------------------------------------------------
	
	void OnGui(float afTimeStep)
	{
		if(mbShowDialogPrompt)
		{
			ImGui_SetTransCategory("");

			cLux_GetGuiHandler().SetGameHudInputFocus(true);
			ImGui_SetModUseInput(true); 
			
			int lEntryPos = 0;
			cImGuiLabelData disabledLabelData;
			disabledLabelData.mFont.SetFile(FontHandler_GetFont(eFontType_MainMenu, 72));
			disabledLabelData.mFont.mvSize = cVector2f(36, 36);
			disabledLabelData.mFont.mColor = cColor(kDisabledColor.r,kDisabledColor.g,kDisabledColor.b,mfTransitionAlpha/2);
			
			if(OptionMenu_MainMenuButton("Succumb and Return to Monke", cVector2f(kMainMenuButtonPos.x + 250, kMainMenuButtonPos.y - 250), lEntryPos, 1, msSelectedMainMenuButton, mlClickedSuccumb, mfTransitionAlpha))
			{
				cLux_GetGuiHandler().SetGameHudInputFocus(false);
				ImGui_SetModUseInput(false);
				
				mlClickedSuccumb = 1;
				
				mbFight = false;
				SequenceStates_Resume("Seq_Finale");	
 
			}
			
			msSelectedMainMenuButton = OptionMenu_UpdateFocus("Succumb and Return to Monke", msSelectedMainMenuButton);
			
			lEntryPos++;
							
			if(OptionMenu_MainMenuButton("Fight Back", cVector2f(kMainMenuButtonPos.x + 330, kMainMenuButtonPos.y + 50), lEntryPos, 2, msSelectedMainMenuButton, mlClickedFight, mfTransitionAlpha))
			{
				cLux_GetGuiHandler().SetGameHudInputFocus(false);
				ImGui_SetModUseInput(false); 
				
				mlClickedFight = 2;
				
				mbFight = true;
				
				SequenceStates_Resume("Seq_Finale");
			}
			
			msSelectedMainMenuButton = OptionMenu_UpdateFocus("Fight Back", msSelectedMainMenuButton);
		}
		
		ImGui_SetModColorMul(cColor(1.0f, 1.0f));
		
		if (mbShowBattleText)
		{
			ImGui_SetModColorMul(cColor(1.0f, mfTextAlpha));
			
			ImGui_SetTransCategory("");
			
			cVector3f vPos;
			vPos.x = -cLux_GetHudVirtualOffset().x;
			vPos.y = -cLux_GetHudVirtualOffset().y;
			vPos.z = 0.0f;
			ImGui_GroupBegin(vPos, ImGui_GetSize());
			
				cImGuiLabelData label = ImGui_GetDefaultLabel();
				label.mColorBase = cColor_White;
				label.mFont.SetFile(FontHandler_GetFont(eFontType_MainMenu, 72));
				label.mFont.mvSize = cVector2f(36, 36);
				label.mFont.mColor = cColor_White;
				label.mFontAlign = eFontAlign_Center;
				
				cVector3f vTextPos;
				vTextPos = ImGui_NrmPosGroup(0.2, 0.5, 0.0);
				vTextPos = cVector3f(vTextPos.x, vTextPos.y, vTextPos.z);
				
				ImGui_DoLabelExt(msBattleLetters, label, vTextPos, cVector2f_MinusOne, 2.0f);
			
			ImGui_GroupEnd();
		}
			
		if (!mbDoHappy) return;
		
		ImGui_SetModColorMul(cColor(1.0f, 1.0f));
			
		cImGuiGfx happy("happy.dds", eImGuiGfx_Texture);
		ImGui_DoImage(happy, ImGui_NrmPos(cVector3f(0, 0, 200.0f)), ImGui_NrmSize(cVector2f(1,1)));
	}
	
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		if(mbMoveForward)
		{
			Player_MoveForward(1.0f);
		}
	}
	
	void PostUpdate(float afTimeStep)
	{
		mfTextAlpha = GuiElementFadeController(mfTextAlpha, mfTextAlphaTarget, afTimeStep);
	}
	
	float GuiElementFadeController(float afAlpha, float afAlphaTarget, float afTimeStep)
	{
		if (afAlpha != afAlphaTarget)
		{
			if (mfAlphaFadeSpeed == 0.0f)
				afAlpha = afAlphaTarget;
			else
				afAlpha = cMath_IncreaseTo(afAlpha, afTimeStep / mfAlphaFadeSpeed, afAlphaTarget);
		}
		
		return afAlpha;
	}
	
	//-------------------------------------------------------
	
	bool mbMoveForward = false;
	bool mbShowDialogPrompt = false;
	bool mbFight = false;
	
	bool mbShowBattleText = false;
	tString msBattleLetters = "";
	
	//-------------------------------------------------------
	
	bool FinaleCutscene(const tString &in asParent, const tString &in asChild, int alState)
	{
		Seq_Finale("");
		
		return false;
	}
 
	cSequenceStatesData mFinaleSequence;	
	void Seq_Finale(const tString&in asTimer)
	{
		Sequence_Begin("Seq_Finale", mFinaleSequence);
		
		if(Sequence_DoStepAndWait(2.0f))
		{
			Player_SetMoveSpeedMul(0.5f);
			Player_StartLookAt("rift_simple_1", 1.0f, 1.0f, 1.0f, true);
			Player_SetActive(false);
			Music_Play("Monkus", 1.0f, false, eMusicPrio_BigEvent);
		}
		else if(Sequence_DoStepAndWait(1.5f))
		{
			mbMoveForward = true;
		}
		else if(Sequence_DoStepAndWait(7.0f))
		{
			Seq_DarkWorldLightning("");
		}
		else if(Sequence_DoStepAndPause(0.0f))
		{
			mbMoveForward = false;
			Player_StopLookAt(1.0f);
			Player_SetActive(true);
			Player_SetMoveSpeedMul(1.0f);
			
			Voice_Play("Munshi_Monologue", -1, "OnVoiceSubjectDonePlaying");
			
			Music_FadeVolumeMul(0.5f, 1.0f);
			Entity_SetActive("block_*", true);
		}
		else if(Sequence_DoStepAndPause(2.0f))
		{
			mbShowDialogPrompt = false;
			Player_SetActive(true);
			
			if (mbFight)
			{
				Voice_Play("Munshi_Fight", -1, "StartFight");
			}
			else
			{
				Music_StopAll(1.0f);
				Voice_Play("Munshi_Beautiful", -1, "BadEnd");
			}
		}
		else if(Sequence_DoStepAndWait(1.0f))
		{
			if (mbFight)
			{								
				Effect_Fade_In(0.5f);
				
				Player_SetCrossHairEnabled(false);
				
				Player_SetActive(false);
				CameraAnimation_Begin("BossCamera", "", false);
			}
			else
			{
				Effect_Fade_Out(3.0f);
			}
		}
		else if(Sequence_DoStepAndWait(2.0f))
		{
			if (mbFight)
			{				
				mbShowBattleText = true;
				Music_PlayExt("final_boss", true, 1.0f, 1.0f, 0.0f, 0.0f, eMusicPrio_BgAmb, true);
				
				Map_AddTimer("AddLetters", 0.0f, "Timer_AddLetters");
			}
		}
		else if(Sequence_DoStepAndContinue())
		{
			if (!mbFight)
			{
				Map_ChangeMap("03_04_fake_ending.hpm", "Start_Begin", "", "");
			}
		}
		
		Sequence_End();
	}
	
	void OnVoiceSubjectDonePlaying(const tString&in asScene, const tString&in asSubject)
	{
		Game_AutoSave();
		
		mbShowDialogPrompt = true;
		Player_SetCrossHairEnabled(false);
		PauseMenu_Enabled(false);
		
		SequenceStates_Pause("Seq_Finale");
	}
	
	void BadEnd(const tString&in asScene, const tString&in asSubject)
	{
		SequenceStates_Resume("Seq_Finale");
	}
	
	void StartFight(const tString&in asScene, const tString&in asSubject)
	{
		Entity_SetActive("block_*", false);
		Player_SetCrossHairEnabled(true);
		PauseMenu_Enabled(true);
		
		Music_StopAll(1.0f);
		Effect_Fade_Out(1.0f);
		
		SequenceStates_Resume("Seq_Finale");
	}
	
	bool BossCamera_5_CameraNodePassed(const tString &in asEntity, int alDirection)
	{
		Map_AddTimer("StopAnimation", 2.0f, "Timer_StopAnimation");
		
		return false;
	}
	
	void Timer_StopAnimation(const tString&in asTimer)
	{
		Player_SetActive(true);
		
		CameraAnimation_End();
		CameraAnimation_RemoveAttachedEntity();
		
		Player_SetCrossHairEnabled(true);
		
		Player_ChangeStateToNormal();
		Player_Teleport("Start_Begin");
		
		mfTextAlphaTarget = 0.0f;
		
		Entity_SetActive("Trigger_2", true);
		
		Map_AddTimer("BananaAttack", 0.7f, "Timer_BananaAttack");
		Map_AddTimer("Message", 1.5f, "Timer_FightMessage");
	}
	
	void Timer_FightMessage(const tString&in asTimer)
	{
		Message_Set("03_03_finale", "FightMessage");
	}
	
	int mlLetterIndex = 0;
	void Timer_AddLetters(const tString&in asTimer)
	{
		if(gvBattleName[mlLetterIndex] != "  ")
		{
			Sound_PlayGui("special_fx/frontend/frontend_menu_select", 1.0f, eSoundEntryType_Gui);
		}
		
		msBattleLetters += gvBattleName[mlLetterIndex];
		mlLetterIndex++;
		
		Map_AddTimer("AddLetters", 0.25f, "Timer_AddLetters");
	}
 
	//-------------------------------------------------------
 
	cSequenceStatesData mSeqDataDarkWorldLightning;	
	void Seq_DarkWorldLightning(const tString &in asTimer)
	{
		Sequence_Begin("Seq_DarkWorldLightning", mSeqDataDarkWorldLightning);
		if (Sequence_DoStepAndWait(0.1f))
		{
			Sound_CreateAtEntity("Sound_Lightning", "01_02_caves/events/darkworld_thunder", "player", 0, false, 0.5f);
		}
		else if (Sequence_DoStepAndWait(0.06f))
		{
			Music_PlayOverlay("rumpa_quick", 1.0f);
			Map_Preset_Fade("Preset_LightningFull", 0.1f);
			Light_FadeBrightnessTo("Light_Point_20", 150.f, 0.1f, eEasing_SineIn);
		}
		else if (Sequence_DoStepAndWait(1.f))
		{
			Map_Preset_Fade("Preset_Default", 1.f);
			Light_FadeBrightnessTo("Light_Point_20", 0.f, 1.f, eEasing_SineOut);
			Map_AddTimer("Timer_DoDarkWorldLightning", cMath_RandRectf(25.f, 45.f), "OnTimer_DoDarkWorldLightning");
		}
		Sequence_End();
	}
	
	void OnTimer_DoDarkWorldLightning(const tString &in asTimer)
	{
		if (!SequenceStates_IsActive("Seq_AlertShadow"))
		{
			Seq_DarkWorldLightning("");
			return;
		}
			 
		Map_AddTimer("Timer_DoDarkWorldLightning", 25.f, "OnTimer_DoDarkWorldLightning");
	}
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		void Timer_CreatePs(const tString&in asTimer)
		{
			Map_AddTimer("CreatePs", 3.0f, "Timer_CreatePs");
			
			ParticleSystem_CreateAtEntity("Woosh", "dwl_rift_effect_1.ps", "PsTarget", true);
		}
	 
		//-------------------------------------------------------
	 
		bool ActivateMonke(const tString &in asParent, const tString &in asChild, int alState)
		{
			SlideDoor_SetClosed("door_right", false);
			SlideDoor_SetClosed("door_left", false);
			
			Entity_SetActive("monke", true);
			
			Monke_SetAllowPlayerThrow("monke", false);
			Monke_CommandPatrol_AddNode("monke", "PathNode_1");
			Monke_CommandPatrol_AddNode("monke", "PathNode_2");
			Monke_CommandPatrol_AddNode("monke", "PathNode_3");
			Monke_CommandPatrol_AddNode("monke", "PathNode_4");
			Monke_CommandPatrol_AddNode("monke", "PathNode_5");
			Monke_CommandPatrol_AddNode("monke", "PathNode_6");
			Monke_CommandPatrol_Execute("monke", true, 2, false, eMonkeSpeed_FastRun);
			
			Agent_RevealPlayerPosition("monke");
			
			return false;
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *Name Of Event*
		//{//////////////////////////////////////

		//-------------------------------------------------------
		
		bool KillMunshi(const tString &in asParent, const tString &in asChild, int alState)
		{
			Map_RemoveTimer("Timer_BananaAttack");
			
			Entity_SetActive("monke", false);
			Entity_SetActive("munshi", false);
			
			ParticleSystem_CreateAtEntity("PS_Explode","grenade_explosion.ps","grenade_place",true);
			Entity_SetActive("grenade",false);
						
			if (cLux_GetPlayer().GetCharacterBody().IsOnGround())
			{
				Player_ChangeStateToNormal();
				Player_SetCrouching(false,true,true);
				PlayerBody_PlayCutsceneAnimation("protects_herself_from_the_explosion",false,0.3f);
			}
			
			Effect_ImageTrail_Start(1.5,0.8f,10,5);
			Sound_CreateAtEntity("Sound_GrenadeExplode", "02_03_arsenal/grenade/grenade_explode", "grenade_place", 0.0f, false, 0.5f);
			Sound_CreateAtEntity("Sound_GrenadeExplodeDebris", "02_03_arsenal/grenade/grenade_debris", "grenade_place", 0.0f, false, 0.5f);
			
			Music_Stop(0.0f, eMusicPrio_BgAmb);
				
			Music_Play("29_event_end", 1.0f, false, eMusicPrio_BigEvent);
			
			Map_AddTimer("Timer_End", 6.0f, "Timer_End");
			
			return false;
		}

		//-------------------------------------------------------

		void Timer_End(const tString&in asTimer)
		{
			Sketchbook_Close();
			Sketchbook_SetInventoryEnabled(false);
			
			Effect_Fade_Out(10.0f);
			
			Sound_FadeGlobalVolume(0.0f, 10.0f, eSoundEntryType_AllExceptGui);
			
			Map_RemoveTimer("Timer_DoDarkWorldLightning");
			Map_AddTimer("EndSpeech", 12.0f, "Timer_EndSpeech");
		}
		
		void Timer_EndSpeech(const tString&in asTimer)
		{
			mbShowBattleText = false;
			Player_SetActive(false);
			
			Music_Play("speech", 0.8f, false, eMusicPrio_BigEvent);
			Voice_Play("Ending_speech", -1, "OnEndingSpeech");
		}
		
		void OnEndingSpeech(const tString&in asScene, const tString&in asSubject)
		{
			Music_StopAll(1.0f);
			
			Sound_FadeGlobalVolume(0.f, 0.f, eSoundEntryType_All);
			
			Credits_Start("Credits_TrueEnd.cfg","OnEndOfCredits", "", cVector3f(-0.15,-0.1,1.75f), "good_ending", 0.00f, 0.5f, 0.5f);
		}
		
		void OnEndOfCredits()
		{
			if (Credits_GetIsSkipActive())
			{
				mbDoHappy = true;
				Music_Play("happy", 0.11f, true, eMusicPrio_BigEvent);
				
				Map_AddTimer("GtfoToMenu", 2.0, "Timer_GtfoToMenu");
			}
			else
			{
				Map_ChangeMap("main_menu.hpm","Start_Begin","","",false);
			}
		}
		
		void Timer_GtfoToMenu(const tString&in asTimer)
		{
			cSystem_Wrapper_CreateMessageBox(eMsgBoxType_Warning, tWString("don't skip the credits"), tWString("special thanks to frictional games for making such an a the amazing game:)"));
			cEngine_Exit();
		}

		//-------------------------------------------------------

		//} END Event *Name Of Event*
		
		tString msCombatArea = "BananShooting_1";
		
		bool SelectCombatArea(const tString &in asParent, const tString &in asChild, int alState)
		{
			Debug_Log(Entity_GetVarString(asParent, ""));
			
			if(alState == 1)
			{
				msCombatArea = Entity_GetVarString(asParent, "");
			}
			
			return true;
		}
			
		void Timer_BananaAttack(const tString&in asTimer)
		{
			Prop_SetActiveAndFade("banana_weapon", true, 0.5f);
			Entity_PlaceAtEntity("banana_weapon", msCombatArea, cVector3f_Zero, true);
			Prop_SetStaticPhysics("banana_weapon", true);
			
			ParticleSystem_CreateAtEntity("spark", "elevator_sparks.ps", msCombatArea, false);
			Sound_CreateAtEntity("Zip", "level_entity_shared/portal/portal_close", msCombatArea, 0, false, 0.6f);
			
			Light_FadeBrightnessTo("Light_" + msCombatArea, 50.f, 0.1f, eEasing_SineIn);
			
			Map_AddTimer("AttackImpulse", 0.5f, "Timer_AttackImpulse");
			Map_AddTimer("DecreaseLight", 0.1f, "Timer_DecreaseLight");
		}
		
		void Timer_DecreaseLight(const tString&in asTimer)
		{
			Light_FadeBrightnessTo("Light_" + msCombatArea, 0.f, 1.f, eEasing_SineOut);
		}
		
		void Timer_AttackImpulse(const tString&in asTimer)
		{
			Entity_FaceToEntity("banana_weapon", "Player", true);
			Prop_SetStaticPhysics("banana_weapon", false);
	
			Entity_AddImpulse("banana_weapon", cVector3f_Back * 35 * cVector3f(1, 5, 1), true, true);
			Map_AddTimer("BananaAttack", cMath_RandRectf(10.0f, 20.0f), "Timer_BananaAttack");
		}
		
		bool TakeDamage(const tString &in asParent, const tString &in asChild, int alState)
		{
			Player_GiveDamage(0.1f, 0.0f, eDamageType_Default, "banana_weapon");
			
			Entity_PlaceAtEntity("banana_weapon", msCombatArea, cVector3f_Zero, true);
			
			Map_AddTimer("disable", 0.02f, "DisableBanana");
			
			if(Player_GetHealth() <= 0.0f)
			{
				Player_GiveDamage(1.0f, 0.0f, eDamageType_Fall, "banana_weapon");
			}
			
			return true;
		}
		
		void DisableBanana(const tString&in asTimer)
		{
			Entity_SetActive("banana_weapon", false);
		}
		
		//-------------------------------------------------------
	 
	//} END SCENE X
 
}