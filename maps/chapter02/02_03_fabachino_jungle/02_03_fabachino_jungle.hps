#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"
#include "helpers/helper_rotation.hps"

#include "helpers/custom/helper_props_custom.hps"
#include "helpers/custom/helpers/helper_modules_custom.hps"
#include "helpers/custom/helpers/helper_player_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("02-03-fabachino-jungle");
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
		ParticleSystem_Preload("grenade_explosion.ps");
		ParticleSystem_Preload("wooden_brace_damage.ps");
		ParticleSystem_Preload("wood_collapse.ps");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		
		Entity_SetActive("monke_sight", true);
		Entity_SetActive("monke", true);
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Player_SetAmbientLight_Outdoors(true);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetNightVisionBrightness(1.0f);
		Player_SetNightVisionRadius(5.5f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		Player_SetAutoTeleportWhenBelowAltitude(-25.0f);
		
		Pregnancy_SetBarksActive(false);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	void Trigger_15_OnPlayerInteract(const tString &in asEntity)
	{
		Message_Set("02_03_fabachino_jungle", "GrenadePlace");
	}
	
	void grenade_OnPlayerInteract(const tString &in asEntity)
	{
		Message_Set("02_03_fabachino_jungle", "Grenade");
	}
 
	//-------------------------------------------------------
 
	bool PlaceGrenade(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive(asChild, false);
		Entity_SetActive("grenade_place", true);
		
		Grenade_Activate();
		
		return false;
	}
 
	//-------------------------------------------------------
	
	void Grenade_Activate()
	{			
		Entity_SetActive("Trigger_15", false);
		
		Sound_CreateAtEntity("Sound_GrenadePin", "02_03_arsenal/grenade/grenade_pin", "grenade_place");
			
		Voice_StopAll();
		
		Map_AddTimer("Timer_Explosion",4.3f,"OnTimer_Explosion");
	}
	
	void OnTimer_Explosion(const tString &in asTimer)
	{
		Prop_SetActiveAndFade("arab_chair_destroyed_*", true, 1.0f);
		
		Prop_SetActiveAndFade("rock_debris_*", true, 1.0f);
		Prop_SetActiveAndFade("debris_*", true, 1.0f);
		
		Prop_SetActiveAndFade("french_gate_1", false, 1.0f);
		Prop_SetActiveAndFade("dirt_small_rock_*", false, 1.0f);
		
		float fDist = Entity_GetDeltaToEntity("grenade_place", "player").Length();
				
		if (fDist < 1.5f)
		{
			Grenade_RadiusDud();
		}
		else
		{					
			Effect_Shake_Start(0.5f, 0.5f, 0.2f, 0.75f, 0.75f, 0);
					
			if (fDist < 6)
			{		
				bool bLOS1 = cLux_CheckLineOfSight(Map_GetEntity("grenade_place").GetPosition(), cLux_GetPlayer().GetCamera().GetPosition(), false, false, null);
				bool bLOS2 = cLux_CheckLineOfSight(Map_GetEntity("grenade_place").GetPosition(), cLux_GetPlayer().GetCharacterBody().GetFeetPosition()+cVector3f(0,0.05f,0), false, false, null);
					
				Debug_Log("HEAD: "+bLOS1+" FEET "+bLOS2);
						
				if (bLOS1 == false && bLOS2 == false) 
					Grenade_RadiusSafe();
				else
					Grenade_RadiusDamage();
						
			}
			else
				Grenade_RadiusSafe();
		}
	}
	
	//-------------------------------------------------------
	
		void Grenade_RadiusDamage()
		{
			// DAMAGE
			Player_AddBodyForce(cVector3f(0, 2000000, 0), false);
			
			Debug_Log("DAMAGE");
			ParticleSystem_CreateAtEntity("PS_Explode","grenade_explosion.ps","grenade_place",true);
			
			Entity_ExplodeSurrounding("grenade_place",10,10);
			
			Player_GiveDamage(0.5f, 0.0f, eDamageType_Default, "grenade_place");
						
			Entity_SetActive("grenade_place",false);
			
			Sound_CreateAtEntity("Sound_GrenadeDamage", "02_03_arsenal/grenade/grenade_near", "player");
			Sound_CreateAtEntity("Sound_GrenadeDamage", "monke/SFX/auugh", "player");
		}
	
		void Grenade_RadiusSafe()
		{
			// SAFE
			ParticleSystem_CreateAtEntity("PS_Explode","grenade_explosion.ps","grenade_place",true);
			Entity_SetActive("grenade_place",false);
			
			Entity_ExplodeSurrounding("grenade_place",15,10);
			
			Debug_Log("SAFE");
			if (cLux_GetPlayer().GetCharacterBody().IsOnGround())
			{
				Player_ChangeStateToNormal();
				Player_SetCrouching(false,true,true);
				PlayerBody_PlayCutsceneAnimation("protects_herself_from_the_explosion",false,0.3f);
			}
			
			Effect_ImageTrail_Start(1.5,0.8f,10,5);
			Sound_CreateAtEntity("Sound_GrenadeExplode", "02_03_arsenal/grenade/grenade_explode", "grenade_place");
			Sound_CreateAtEntity("Sound_GrenadeExplodeDebris", "02_03_arsenal/grenade/grenade_debris", "grenade_place");
			
			Music_Play("A2_2_3_Grenade_Detonated.ogg", 0.4f, false, eMusicPrio_BigEvent);
		}
		
		//-------------------------------------------------------
		
		void Grenade_RadiusDud()
		{			
			Player_GiveDamage(0.5f, 0.0f, eDamageType_Default, "grenade_place");
			
			Player_AddBodyForce(cVector3f(0, 2000000, 0), false);
			Player_Jump();
			
			Map_AddTimer("Timer_DudReaction",2.6f, "OnTimer_DudReaction");
			
			Sound_Stop("Sound_GrenadeFuse", 0.2f);
			Sound_CreateAtEntity("Sound_GrenadeDud", "02_03_arsenal/grenade/grenade_dud", "grenade_place");
		}
		
		//-------------------------------------------------------
		
		void Entity_ExplodeSurrounding(const tString &in asEntity, float afDist, float afImpulse)
		{
			cLux_ProfileStart("EXPLODE");
			
			cVector3f vPos = cLux_GetCurrentMap().GetEntityByName(asEntity).GetPosition();
			
			array<iPhysicsBody@> vNearbyBodies;
			array<iPhysicsBody@> vClosestBodies;
			array<iLuxEntity@> vNearbyEntities;
			
			cVector3f vMin = vPos - cVector3f_One*afDist*0.6f;
			cVector3f vMax = vPos + cVector3f_One*afDist*0.6f;
			
			vMin = vPos - cVector3f_One*afDist/2;
			vMax = vPos + cVector3f_One*afDist/2;
			cLux_GetCurrentMap().GetPhysicsWorld().GetBodiesInAABB(vMin,vMax,vClosestBodies);
			cLux_AddDebugMessage("BODIES: "+vClosestBodies.length());
			for (int i = 0; i < vClosestBodies.length(); i++)
			{
				// PUSH
				iPhysicsBody@ pBody = vClosestBodies[i];
				if (pBody is null) continue;
				iLuxEntity@ pEnt = cLux_GetBodyEntity(pBody);
				if (pEnt is null) continue;
				if (pEnt.GetEntityType() != eLuxEntityType_Prop) continue;		
				if (pEnt.GetClassName() == "cScrPropPickup" ||
					pEnt.GetClassName() == "cScrPropReadable")
				{
					continue;
				}
				
				cVector3f vDir = pBody.GetWorldPosition() - cLux_GetCurrentMap().GetEntityByName(asEntity).GetPosition();
				float fDist = vDir.Length();
				vDir.Normalize();
				float fDistMul = 1 - (fDist/afDist);
				fDistMul = cMath_Clamp(fDistMul, 0.1f, 1);
				float fMassMul = 1 - cMath_Clamp(pBody.GetMass(),0,1);
				fMassMul = cMath_Clamp(fMassMul, 0.5f,1);
				cVector3f vFinalImpulse = vDir*afImpulse*fDistMul*fMassMul;
				pBody.AddImpulse(vFinalImpulse);
			}
		}
		
		//-------------------------------------------------------
		
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 Pool encounter
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
		
		bool Hint(const tString &in asParent, const tString &in asChild, int alState)
		{
			Hint_ShowHint("Hints", "HintForest");
			
			return false;
		}
		
		//-------------------------------------------------------
		
		void monke_sight_OnPlayerLookAt(const tString &in asEntity, int alState)
		{
			MonkeGoBrrrrrr();
		}
		
		bool ForceMonke(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(Entity_IsActive("monke_sight"))
			{
				MonkeGoBrrrrrr();
			}
			
			return false;
		}
	 
		void MonkeGoBrrrrrr()
		{
			Monke_CommandGoToSpecificHole_Execute("monke_sight", "GhoulHole_1", true, false, true, eMonkeSpeed_Run);
		}
	 
		//-------------------------------------------------------
	 
		bool Monke_Disappear(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive(asChild, false);
			
			return true;
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event Set up the enemy
		//{//////////////////////////////////////

		//-------------------------------------------------------

		bool ActivateMonke(const tString &in asParent, const tString &in asChild, int alState)
		{
			Monke_SetAllowPlayerThrow("monke", false);
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_1");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_2");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_3");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_4");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_5");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_6");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_6");
			Monke_CommandPatrol_Execute("monke", true, 999);
			
			Music_PlayExt("water", true, 0.65f, 1.0f, 2.0f, 1.0f, eMusicPrio_BgAmb, true);
			
			return false;
		}

		//-------------------------------------------------------
				
		bool StopChase(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive("Trigger_9", true);
			Monke_CommandGoToSpecificHole_Execute("monke", "GhoulHole_1", true, false, true, eMonkeSpeed_Run);
			
			return false;
		}

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE 1
	
	//-------------------------------------------------------

	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		bool AutoSave(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive("monke", false);
			Game_AutoSave();
			
			Voice_Play("MonkeComment");
			
			return false;
		}
	 
		//-------------------------------------------------------
	 
		void herberts_memory_cylinder_1_OnPlayerInteract(const tString &in asEntity)
		{
			Entity_SetActive("head", true);
			Entity_SetActive("Trigger_11", true);
		}
	 
		//-------------------------------------------------------
		
		void Trigger_13_OnPlayerInteract(const tString &in asEntity)
		{
			Message_Set("02_03_fabachino_jungle", "ExamineTank");
		}
		
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *SECRET*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		bool PrepareSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			Player_SetCanDie(false);
			FearHandler_SetActive(false);
			
			return false;
		}

		//-------------------------------------------------------

		int mlMatchCount;
		bool ActivateSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			Map_SetSkyBoxColor(cColor(0,0,0,0));
			
			Sketchbook_Close();
			Sketchbook_SetInventoryEnabled(false);
			
			if(cScript_GetGlobalVarBool("PickedLantern"))
			{
				mlMatchCount = Matches_GetCount();
				
				Item_RemoveFromInventory(ItemType_GetFirstInInventory("Lantern"));
				Item_ReduceContentCount("Matchbook", 0);
			}
						
			Player_SetNightVisionEnabled(true);
			Player_SetRunBreathingDisabled(true);
			Player_SetJumpDisabled(true);
			Player_SetCrouching(false, true);
			Player_SetCrouchDisabled(true);
			Player_SetLeanDisabled(true);
			PlayerBody_SetActive(false);
			
			Effect_Fade_Out(0.0f);
			
			Map_AddTimer("te", 3.0f, "Timer_Teleport");
			
			return false;
		}
		
		void Timer_Teleport(const tString&in asTimer)
		{
			Player_Teleport("Secret");
		}

		//-------------------------------------------------------
		
		bool StartSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			Effect_Fade_In(1.0f);
			Music_PlayExt("truth_1", true, 0.9f, 1.0f, 1.0f, 1.0f, eMusicPrio_BgAmb, true);
	
			return false;
		}
		
		//-------------------------------------------------------
		
		bool ChangeMap(const tString &in asParent, const tString &in asChild, int alState)
		{
			Light_FadeBrightnessTo("Light_Face", 1.0f, 0.5f);
			Map_AddTimer("ChangeMap", 0.6f, "Timer_ChangeMap");
			
			return false;
		}
		
		void Timer_ChangeMap(const tString&in asTimer)
		{
			if(!cLux_ScriptDebugOn())
			{
				if(cScript_GetGlobalVarBool("PickedLantern"))
				{
					Item_AddToInventory("Lantern");
				}
				
				Item_SetAmount("Matchbook", mlMatchCount);
				
				Player_SetCanDie(true);
				Effect_Fade_Out(0.0f);
				Music_StopAll(0.0f);
				Map_ChangeMap("02_04_monke_town.hpm", "Start_Begin", "", "");
			}
		}

		//} END Event *Secret*
	 
	//} END SCENE X 
}