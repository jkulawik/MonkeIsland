#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"
#include "helpers/helper_rotation.hps"

#include "helpers/custom/helper_props_custom.hps"
#include "helpers/custom/helpers/helper_modules_custom.hps"
#include "helpers/custom/helpers/helper_player_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("02-03-fabachino-jungle");
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		
		Entity_SetActive("monke_sight", true);
		Entity_SetActive("monke", true);
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Player_SetAmbientLight_Outdoors(true);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetNightVisionBrightness(1.0f);
		Player_SetNightVisionRadius(5.5f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetVertigoActive(false);
		Player_SetAllowCheckBaby(false);
		Player_SetAutoTeleportWhenBelowAltitude(-25.0f);
		
		Pregnancy_SetBarksActive(false);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	/*Put any variables that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	/*Put any functions that are used in more than one scene here.*/
 
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 Pool encounter
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
		
		void monke_sight_OnPlayerLookAt(const tString &in asEntity, int alState)
		{
			MonkeGoBrrrrrr();
		}
		
		bool ForceMonke(const tString &in asParent, const tString &in asChild, int alState)
		{
			if(Entity_IsActive("monke_sight"))
			{
				MonkeGoBrrrrrr();
			}
			
			return false;
		}
	 
		void MonkeGoBrrrrrr()
		{
			Monke_CommandGoToSpecificHole_Execute("monke_sight", "GhoulHole_1", true, false, true, eMonkeSpeed_Run);
		}
	 
		//-------------------------------------------------------
	 
		bool Monke_Disappear(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive(asChild, false);
			
			return true;
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event Set up the enemy
		//{//////////////////////////////////////

		//-------------------------------------------------------

		bool ActivateMonke(const tString &in asParent, const tString &in asChild, int alState)
		{
			Monke_SetAllowPlayerThrow("monke", false);
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_1");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_2");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_3");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_4");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_5");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_6");
			Monke_CommandPatrol_AddNode("monke", "PathNodePatrol_6");
			Monke_CommandPatrol_Execute("monke", true, 999);
			
			Music_PlayExt("water", true, 0.65f, 1.0f, 2.0f, 1.0f, eMusicPrio_BgAmb, true);
			
			return false;
		}

		//-------------------------------------------------------
				
		bool StopChase(const tString &in asParent, const tString &in asChild, int alState)
		{
			Entity_SetActive("Trigger_9", true);
			Monke_CommandGoToSpecificHole_Execute("monke", "GhoulHole_1", true, false, true, eMonkeSpeed_Run);
			
			return false;
		}

		//-------------------------------------------------------

		//} END Event *Name Of Event*
	 
	//} END SCENE 1
	
	//-------------------------------------------------------

	// ==============
	// SCENE X *NAME OF SCENE*
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		/*Put any variables that are used by many events in Scene X here.*/
	 
		//-------------------------------------------------------
	 
		void herberts_memory_cylinder_1_OnPlayerInteract(const tString &in asEntity)
		{
			Entity_SetActive("head", true);
			Entity_SetActive("Trigger_11", true);
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event *SECRET*
		//{//////////////////////////////////////

		//-------------------------------------------------------

		bool PrepareSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			cLux_SetGodModeActivated(true);
			FearHandler_SetActive(false);
			
			return false;
		}

		//-------------------------------------------------------

		bool ActivateSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			Map_SetSkyBoxColor(cColor(0,0,0,0));
			
			Sketchbook_Close();
			Sketchbook_SetInventoryEnabled(false);
						
			Player_SetNightVisionEnabled(true);
			Player_SetRunBreathingDisabled(true);
			Player_SetJumpDisabled(true);
			Player_SetCrouching(false, true);
			Player_SetCrouchDisabled(true);
			Player_SetLeanDisabled(true);
			PlayerBody_SetActive(false);
			
			Effect_Fade_Out(0.0f);
			
			Map_AddTimer("te", 3.0f, "Timer_Teleport");
			
			return false;
		}
		
		void Timer_Teleport(const tString&in asTimer)
		{
			Player_Teleport("Secret");
		}

		//-------------------------------------------------------
		
		bool StartSecret(const tString &in asParent, const tString &in asChild, int alState)
		{
			Effect_Fade_In(1.0f);
			Music_PlayExt("truth_1", true, 0.9f, 1.0f, 1.0f, 1.0f, eMusicPrio_BgAmb, true);
	
			return false;
		}
		
		//-------------------------------------------------------
		
		bool ChangeMap(const tString &in asParent, const tString &in asChild, int alState)
		{
			return false;
		}

		//} END Event *Secret*
	 
	//} END SCENE X 
}