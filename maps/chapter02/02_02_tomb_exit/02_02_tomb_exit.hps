#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_message.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/
 
//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		GetBase().SetDisplayNameEntry("02-02-tomb-exit");
		
		Effect_DoF_Start(0, 200, 1.5f, 1.0f);
	}
	
	//-------------------------------------------------------
		
	void PreloadData()
	{
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		FearHandler_SetActive(true);
		
		FearHandler_SetPermaFailEnabled(false);
		FearHandler_SetWhispersActive(true);
		FearHandler_SetAllowDarknessReminderHint(false);
		FearHandler_SetAllowLanternOveruseHint(false);
		FearHandler_SetAllowMonsterHint(false);
		FearHandler_SetAllowWarningHint(false);
		FearHandler_SetAllowLanternRefillHint(false);
		FearHandler_SetAllowLanternReminderHint(false);
		FearHandler_SetCanGasp(false);
		
		cScript_SetGlobalVarBool("HideAmuletBracelet", false);
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{	
		Player_SetAmbientLight_Outdoors(true);
		
		PlayerBody_SetActive(true);
		Player_SetMapDeepShadow(0.05f);
		Player_SetNightVisionEnabled(false);
		Player_SetVertigoActive(true);
		Player_SetAllowCheckBaby(false);
		Player_SetAutoTeleportWhenBelowAltitude(0.0f);
		Player_SetFallDistances(1.0f, 4.0f, 6.0f);
		Player_SetCanDie(true);
		
		Pregnancy_SetBarksActive(false);
		
		cLux_ClearAllMapSaveData();		
		Game_AutoSave();
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	}

	//-------------------------------------------------------

	////////////////////////////
	// The player has died.
	void OnPlayerKilled(int alRecentDeaths, const tString&in asSource)
	{
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player HP reaches 0
	bool OnDeath(const tString &in asSource)
	{
		cLux_AddTodoMessage("DEAD : SOURCE = " + asSource);
		
		if (asSource == "SomeReason")
		{
			Effect_Fade_Out(1.0f);
			return true; // return true to completely override base behaviour
		}
		
		// return false for default behaviour
		return false;
	}
	
	//-------------------------------------------------------
	
	////////////////////////////////////
	// Called when player should respawn (after death)
	bool OnRespawn(const tString &in asSource)
	{		
		// return false for default behaviour (fadeout and death area)
		return false;
	}

	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if(abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	bool mbInteractingWithCannon = false;
	bool mbCannonFired = false;
	
	int mlTurretControlStage = 2;
	
	float[] mfPromptAlpha = {0.f, 0.f};
	float mfPromptFrameTime = 0.f;
	
	//-------------------------------------------------------
 
	void OnGui(float afTimeStep)
	{
		if (mbInteractingWithCannon == false)
			return;
			
		/////////////////////
		// Time
		mfPromptFrameTime += afTimeStep;
		
		/////////////////////
		// Setup
		cVector3f vPos = cVector3f_Zero;
		vPos.x = -cLux_GetHudVirtualOffset().x;
		vPos.y = -cLux_GetHudVirtualOffset().y;
		vPos.z = 0.0f;
			
		cVector2f vScreenSize = ImGui_GetSize();
		cVector2f vSize = vScreenSize;

		vSize.x = vSize.y / 9.f * 16.f;
		vPos.x -= (vSize.x - vScreenSize.x) / 2.f;
			
		cLuxScreenTextFormatParameters formatParams;
		formatParams.mLabelText.mColorBase = cColor(1.f);
		formatParams.mLabelText.mFontAlign = eFontAlign_Left;
		formatParams.mLabelText.mFont.SetFile("work_56.fnt");
		formatParams.mLabelText.mFont.mvSize = cVector2f(22.f);
		formatParams.mfIconGamepadHeight = formatParams.mLabelText.mFont.mvSize.y;
		formatParams.mfIconKeyHeight = formatParams.mLabelText.mFont.mvSize.y;
		formatParams.mfIconMouseHeight = formatParams.mLabelText.mFont.mvSize.y;
			
		/////////////////////
		// Start group
		ImGui_GroupBegin(vPos, vSize);
		ImGui_SetTransCategory("");
			
		cVector3f vPromptPos = ImGui_NrmPosGroup(0.75f, 0.8f, 2.f);
		cVector2f vPromptSize = ImGui_NrmSizeGroup(0.5f, 0.03f);		
			
		/////////////////////
		// Iterate prompts
		tString[] sPrompts = { "HintFireTankCannon", "HintExitTankState" };			
		bool bGamepad  = cLux_GetInputHandler().GetGamepadWasLastDeviceUsed();
	
		for (int i = 1; i >= 0; --i)
		{	
			/////////////////////
			// Determine category
			tString sCategory = "Hints";
			if (bGamepad && cLux_HasTranslation("HintsGamepad", sPrompts[i]))
				sCategory = "HintsGamepad";
				
			/////////////////////
			// Alpha
			float fAlphaGoal = mlTurretControlStage == 2 ? 1.f : 0.f;
			if (i == 0 && mbCannonFired)
				fAlphaGoal = 0.f;
			
			mfPromptAlpha[i] = cMath_IncreaseTo(mfPromptAlpha[i], (1.f / 0.3f) * afTimeStep, fAlphaGoal);
				
			cColor color = formatParams.mLabelText.mColorBase;
			color.a = mfPromptAlpha[i];
			ImGui_SetModColorMul(color);
				
			/////////////////////
			// Parse prompt
			array<tWString> vCurrentPromptLines;
			array<cLuxScreenTextIcon@> vCurrentPromptIcons;
			array<array<int>> vCurrentPromptIconsPerLine;
				
			float fLineHeight = 0.f;
			float fDisplayTime = 0.f;
			cLux_ParseStringIntoScreenText(cLux_Translate(sCategory, sPrompts[i]), cLux_GetGameHudImGui(), formatParams, vCurrentPromptLines, 
										   vCurrentPromptIcons, vCurrentPromptIconsPerLine, fLineHeight, fDisplayTime, bGamepad);
				
			/////////////////////
			// Draw prompt in parts for better spacing
			tWString sLineOnly = vCurrentPromptLines[0];
			tWString sSeparator = "-";
					
			int lPos = cString_GetFirstStringPosW(sLineOnly, sSeparator);
			int lLineLength = sLineOnly.length();
			
			vCurrentPromptLines[0] = cString_SubW(vCurrentPromptLines[0], 0, lPos);
			sLineOnly = cString_SubW(sLineOnly, lPos + 1, lLineLength);
					
			cVector3f vSeparatorPos = vPromptPos + ImGui_NrmPosGroup(0.035f, 0.f, 0.f);
			ImGui_DoLabelExt(cString_To8Char(sSeparator), formatParams.mLabelText, vSeparatorPos, vPromptSize);
				
			cVector3f vLineOnlyPos = vPromptPos + ImGui_NrmPosGroup(0.055f, 0.f, 0.f);
			ImGui_DoLabelExt(cString_To8Char(sLineOnly), formatParams.mLabelText, vLineOnlyPos, vPromptSize);
			
			/////////////////////
			// Draw prompt!
			cLux_DrawScreenText(cLux_GetGameHudImGui(), mfPromptFrameTime, formatParams.mLabelText, vPromptPos, vPromptSize.x, 1.f, 
								vCurrentPromptLines, vCurrentPromptIcons, vCurrentPromptIconsPerLine);
									
			vPromptPos.y -= vPromptSize.y;
		}		
			
		/////////////////////
		// End group
		ImGui_ResetModifiers();
		ImGui_GroupEnd();
	}
	 
	//-------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		if (mbInteractingWithCannon == false)
			return;
			
		if(cInput_CheckForInput())
		{			
			if (cInput_BecameTriggered(eAction_Interact))
			{
				cLux_AddDebugMessage("Interacted!");
			}
		}
	}
	
	//-------------------------------------------------------
 
	//} END MAIN FUNCTIONS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// SCENE 1 cliff
	// ==============
	//{//////////////////////////////////////////////////////////////////////////////////////
 
		/////////////////////////////////////////
		// General
		//{//////////////////////////////////////
		 
		//-------------------------------------------------------
	 
		bool LadderHint(const tString &in asParent, const tString &in asChild, int alState)
		{
			Hint_ShowHint("Hints", "HintLadder");
			
			return false;
		}
	 
		//-------------------------------------------------------
	 
		bool FallTheLadder(const tString &in asParent, const tString &in asChild, int alState)
		{
			Sketchbook_SetInventoryEnabled(false);
			
			bool bPlayerClimbing = Entity_IsInteractedWith("Ladder_1");
				
			Entity_SetActive("Ladder_1", false);
			Player_ChangeStateToNormal();
				
			cLux_AddDebugMessage("Player climbing? "+bPlayerClimbing);
			if (bPlayerClimbing==false) return false;
				
			CameraAnimation_Begin("LadderFallAnim", "", true);
			
			Sound_CreateAtEntity("Break", "02_04_living_quarters/tower/beam_snap", "Player", 0, false, 0.7f);
				
			Effect_Shake_Start(0.075, 0, 0, 0.5);
			Effect_Rumble_Start(0.7, 0.7);
			
			return false;
		}
		
		bool CameraAnimation_LadderFall(const tString &in asEntity, int alDirection)
		{
			Sound_CreateAtEntity("Fall", "monke/Player/falling_woosh/falling_aaaah_woosh", "Player", 0.0f, false, 0.09f);
			
			Player_AddBodyForce(cVector3f_Down * 400, false);
			GameOver_SetCustomGameOverScreenText("GameOver", "Ladder");
			
			return false;
		}
		
		bool StopFallingSound(const tString &in asParent, const tString &in asChild, int alState)
		{
			Sound_Stop("Fall", 0.1f);
			
			return false;
		}
		
		void Trigger_7_OnPlayerInteract(const tString &in asEntity)
		{
			Message_Set("02_02_tomb_exit", "BallsInteract");
		}
	 
		//-------------------------------------------------------
	 
		void CannonInteract(const tString &in asEntity)
		{
			Player_SetActive(false);
			
			Effect_Fade_Out(1.0f);
			Map_AddTimer("GetIntoCannon", 0.9f, "Timer_GetIntoCannon");
		}
		
		void Timer_GetIntoCannon(const tString&in asTimer)
		{
			Sound_CreateAtEntity("Sound_LookExit", "new_sounds/animations/tank_window_exit", "player");
			Player_SetActive(true);
			
			mbInteractingWithCannon = true;
		
			CameraAnimation_Begin("CannonPlace", "", false);
			Effect_Fade_In(1.0f);
		}
	 
		//-------------------------------------------------------
		
		//} END General	
	 
		/////////////////////////////////////////
		// Event ignite cannon
		//{//////////////////////////////////////

		//-------------------------------------------------------

		/*Put any variables that are only used in Scene X, Event X here.*/

		//-------------------------------------------------------

		void CannonString_OnPlayerInteract(const tString &in asEntity)
		{
			
		}
		
		//-------------------------------------------------------

		//} END Event ignite cannon
	 
	//} END SCENE 1
 
}
